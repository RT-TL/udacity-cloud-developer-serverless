service:
  name: sls-video-app-cap

plugins:
  - serverless-webpack
  - serverless-offline-localstack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-reqvalidator-plugin
  - serverless-s3-local

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
      VIDEOS_TABLE: rttl-Videos-${self:provider.stage}
      VIDEOS_BUCKET: rttl-serverless-videos-${self:provider.stage}
      SIGNED_URL_EXPIRATION: 500
      PUBLIC_INDEX: publicIndex
      VIDEO_INDEX: videoIndex

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'

custom:
  serverless-offline:
    host: 0.0.0.0
    port: 4000
    httpPort: 3333
    endpoints: 
      S3: http://localhost:4572
      DynamoDB: http://localhost:4569
  
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      noStart: true
      host: http://localhost
      port: 4569
  
  s3:
    host: http://localhost
    noStart: true
    port: 4572
    directory: /tmp
  
  serverless-iam-roles-per-function:
    defaultInherit: true
    
  documentation:
    api:
      info:
        version: v1.0.0
        title: Video Platform API
        description: serverless app
    models:
      - name: CreateVideo
        contentType: application/json
        schema: ${file(./models/create-video-model.json)}
      - name: UpdateVideo
        contentType: application/json
        schema: ${file(./models/update-video-model.json)}
      - name: PublishVideo
        contentType: application/json
        schema: ${file(./models/publish-video-model.json)}
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetVideo:
    handler: src/lambda/http/getPrivateVideos.handler
    events:
      - http:
          method: get
          path: videos/{videoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.VIDEO_INDEX}
  
  GetVideos:
    handler: src/lambda/http/getPrivateVideos.handler
    events:
      - http:
          method: get
          path: videos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}

  GetPublicVideos:
    handler: src/lambda/http/getPublicVideos.handler
    events:
      - http:
          method: get
          path: publicVideos
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.PUBLIC_INDEX}

  CreateVideo:
    handler: src/lambda/http/createVideo.handler
    events:
      - http:
          method: post
          path: videos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestValidator
          documentation:
            summary: Add new video
            description: add new video
            requestModels:
              'application/json': CreateVideo
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEOS_BUCKET}:/*  

  UpdateVideo:
    handler: src/lambda/http/updateVideo.handler
    events:
      - http:
          method: patch
          path: videos/{videoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestValidator
          documentation:
            summary: update video
            description: update video
            requestModels:
              'application/json': UpdateVideo
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
     
  UnpublishVideo:
    handler: src/lambda/http/unpublishVideo.handler
    events:
      - http:
          method: patch
          path: videos/{videoId}/unpublish
          cors: true
          authorizer: Auth
          documentation:
            summary: Unpublish video
            description: makes a video resource unavailable for other users
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
    

  PublishVideo:
    handler: src/lambda/http/publishVideo.handler
    events:
      - http:
          method: patch
          path: videos/{videoId}/publish
          cors: true
          authorizer: Auth
          documentation:
            summary: Publish video
            description: makes a video resource publicly available
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
      

  DeleteVideo:
    handler: src/lambda/http/deleteVideo.handler
    events:
      - http:
          method: delete
          path: videos/{videoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
  
resources:
  Resources:
    
    Gateway:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    # TODO: Add validator resourses
    RequestValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    VideosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: videoId
            AttributeType: S
          - AttributeName: public
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: videoId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.PUBLIC_INDEX}
            KeySchema:
              - AttributeName: public
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.VIDEO_INDEX}
            KeySchema:
              - AttributeName: videoId
                KeyType: HASH
            Projection:
              ProjectionType: ALL    
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VIDEOS_TABLE}

    VideosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.VIDEOS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
          
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: RttlVideoBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.VIDEOS_BUCKET}/*'
        Bucket: !Ref VideosBucket

